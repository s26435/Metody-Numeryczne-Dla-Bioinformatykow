# -*- coding: utf-8 -*-
"""Projekt Metody Numeryczne.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1te_oOTTLAURwqqsWeR02OFN4zPV60qOx

# Projekt Metody Numeryczne w Bioinformatyce
Autor: Jan Wolski <br>
Nr. Studenta: 292407

### Przygotowanie Środowiska
"""

import numpy as np
import pandas as pd
import sympy as sp

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

"""### Zadanie 1
Używając wzoru Newtona: <br>
$x_{k+1} = x_k \cdot (1 - \frac{1}{n}) + \frac{a}{n \cdot x_{k}^{n-1}}$ <br>
oblicz pierwiastki:
* $161^{\frac{1}{3}}$, $x_0 = 6$
* $21,75^{\frac{1}{4}}$, $x_0 = 2$
* $238,56^{\frac{1}{5}}$, dla $x_0 = 3$

"""


def nth_root(a: float, n: float, x0: float = float('-inf'), tolerance: float = 1e-10,
             max_iterations: int = 1000) -> float:
    try:
        if a <= 0:
            raise ValueError(f'a > 0, a otrzymano {a}')
        if n <= 0:
            raise ValueError(f'n > 0, a otrzymano {n}')

        if x0 == float('-inf'):
            x = a
        else:
            x = x0
        for i in range(max_iterations):
            x_next = x * (1 - 1 / n) + a / (n * x ** (n - 1))
            if abs(x - x_next) < tolerance:
                return x_next
            x = x_next

        raise ValueError("Nie udało się znaleźć pierwiastka z zadaną dokładnością.")

    except ValueError as ve:
        print(f"Błąd wartości: {ve}")
    except Exception as e:
        print(f'Podczas liczenia nastąpił błąd: {str(e)}')


print(f'Dla x0 = 6, a = 161, n = 1/3:\t {nth_root(161, 3, 6)}')
print(f'Dla x0 = 2, a = 21,75, n = 1/4:\t {nth_root(21.75, 4, 2)}')
print(f'Dla x0 = 3, a = 238,56, n = 1/5:\t {nth_root(161, 5, 3)}')

"""### Zadanie 2
Zbudować tablice wartości y, które dla danych x spełniają równanie <br>

$G(x,y) = 3x^7 + 2y^5 - x^3 + y^3 - 3$, <br>
zaczynając od $x_0 = 0$ i ziększając o 0,1 aż do 10.
"""


def zad_2(tolerance: float = 1e-6, max_iterations: int = 100):
    x = sp.symbols('x')
    y = sp.symbols('y')
    fn = 3 * x ** 7 + 2 * y ** 5 - x ** 3 + y ** 3 - 3
    dfn = sp.diff(fn, y)

    func = sp.lambdify((x, y), fn)
    funcprim = sp.lambdify((x, y), dfn)
    x_values = np.arange(0, 10.1, 0.1)
    y_values = []
    for x in x_values:
        y = 1
        for _ in range(max_iterations):
            val = func(x, y)
            d = funcprim(x, y)
            if abs(d) < tolerance / 2:
                break

            y_new = y - val / d

            if abs(y_new - y) < tolerance:
                y = y_new
                break
            y = y_new
        y_values.append(y)
    return pd.DataFrame({'x': x_values, 'y': y_values})


print(zad_2())
